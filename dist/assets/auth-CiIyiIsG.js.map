{"version":3,"file":"auth-CiIyiIsG.js","sources":["../../src/script/utils/auth.js"],"sourcesContent":["const SECRET_KEY = 'SwiftEdge_Admin_2025';\r\n\r\n// Admin credentials (in production, this should be in a secure backend)\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin@swiftedge.com',\r\n  password: '12345EM@',\r\n  profile: {\r\n    id: 'admin-001',\r\n    full_name: 'SwiftEdge Admin',\r\n    role: 'admin',\r\n    avatar_url: '/src/images/admin-avatar.jpg'\r\n  }\r\n};\r\n\r\nexport const generateToken = (length = 32) => {\r\n  const array = new Uint8Array(length);\r\n  crypto.getRandomValues(array);\r\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\r\n};\r\n\r\nexport const verifyCredentials = (email, password) => {\r\n  return email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password;\r\n};\r\n\r\nexport const encryptData = (data) => {\r\n  try {\r\n    const jsonString = JSON.stringify(data);\r\n    return btoa(jsonString);\r\n  } catch (error) {\r\n    console.error('Encryption error:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const decryptData = (encryptedData) => {\r\n  try {\r\n    const jsonString = atob(encryptedData);\r\n    return JSON.parse(jsonString);\r\n  } catch (error) {\r\n    console.error('Decryption error:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const setAdminSession = () => {\r\n  const token = generateToken();\r\n  const expiresAt = Date.now() + (24 * 60 * 60 * 1000); // 24 hours\r\n\r\n  const sessionData = {\r\n    token,\r\n    user: ADMIN_CREDENTIALS.profile,\r\n    expiresAt,\r\n  };\r\n\r\n  localStorage.setItem('swiftedge_admin_session', encryptData(sessionData));\r\n  return token;\r\n};\r\n\r\nexport const getAdminSession = () => {\r\n  const encryptedSession = localStorage.getItem('swiftedge_admin_session');\r\n  if (!encryptedSession) return null;\r\n\r\n  const session = decryptData(encryptedSession);\r\n  if (!session || Date.now() > session.expiresAt) {\r\n    localStorage.removeItem('swiftedge_admin_session');\r\n    return null;\r\n  }\r\n\r\n  return session;\r\n};"],"names":["ADMIN_CREDENTIALS","generateToken","length","array","byte","verifyCredentials","email","password","encryptData","data","jsonString","error","decryptData","encryptedData","setAdminSession","token","expiresAt","sessionData","getAdminSession","encryptedSession","session"],"mappings":"AAGA,MAAMA,EAAoB,CACxB,MAAO,sBACP,SAAU,WACV,QAAS,CACP,GAAI,YACJ,UAAW,kBACX,KAAM,QACN,WAAY,8BAChB,CACA,EAEaC,EAAgB,CAACC,EAAS,KAAO,CAC5C,MAAMC,EAAQ,IAAI,WAAWD,CAAM,EACnC,cAAO,gBAAgBC,CAAK,EACrB,MAAM,KAAKA,EAAOC,GAAQA,EAAK,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,EAAE,KAAK,EAAE,CAC9E,EAEaC,EAAoB,CAACC,EAAOC,IAChCD,IAAUN,EAAkB,OAASO,IAAaP,EAAkB,SAGhEQ,EAAeC,GAAS,CACnC,GAAI,CACF,MAAMC,EAAa,KAAK,UAAUD,CAAI,EACtC,OAAO,KAAKC,CAAU,CACxB,OAASC,EAAO,CACd,eAAQ,MAAM,oBAAqBA,CAAK,EACjC,IACT,CACF,EAEaC,EAAeC,GAAkB,CAC5C,GAAI,CACF,MAAMH,EAAa,KAAKG,CAAa,EACrC,OAAO,KAAK,MAAMH,CAAU,CAC9B,OAASC,EAAO,CACd,eAAQ,MAAM,oBAAqBA,CAAK,EACjC,IACT,CACF,EAEaG,EAAkB,IAAM,CACnC,MAAMC,EAAQd,IACRe,EAAY,KAAK,IAAG,EAAM,KAAU,GAAK,IAEzCC,EAAc,CAClB,MAAAF,EACA,KAAMf,EAAkB,QACxB,UAAAgB,CACJ,EAEE,oBAAa,QAAQ,0BAA2BR,EAAYS,CAAW,CAAC,EACjEF,CACT,EAEaG,EAAkB,IAAM,CACnC,MAAMC,EAAmB,aAAa,QAAQ,yBAAyB,EACvE,GAAI,CAACA,EAAkB,OAAO,KAE9B,MAAMC,EAAUR,EAAYO,CAAgB,EAC5C,MAAI,CAACC,GAAW,KAAK,IAAG,EAAKA,EAAQ,WACnC,aAAa,WAAW,yBAAyB,EAC1C,MAGFA,CACT"}